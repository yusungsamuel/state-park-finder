{"version":3,"sources":["utils/API.js","marker/index.js","modal/index.js","form/index.js","map/index.js","jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["require","config","API_KEY","process","API","AllForState","axios","get","SearchByName","name","Marker","state","info","description","_this","props","data","designation","directions Info","directionsInfo","directions Url","directionsUrl","fullName","states","url","weather Info","weatherInfo","_this2","this","react_default","a","createElement","className","onClick","data-toggle","data-target","Component","Modal","id","tabindex","role","aria-labelledby","aria-hidden","parkTitle","type","data-dismiss","aria-label","children","SearchForm","searchValue","searchResult","handleInputChange","event","preventDefault","value","target","setState","handleFormSubmit","then","res","helper","onSubmit","onChange","placeholder","class","Map","center","lat","lng","zoom","currentParkInfo","handlePinClick","newData","forEach","item","latLong","push","console","log","_this3","form_SearchForm","style","height","width","lib_default","bootstrapURLKeys","key","defaultCenter","defaultZoom","map","park","i","split","substr","length","long","marker_Marker","uniqueId","modal_Modal","Object","keys","concat","toUpperCase","Jumbotron","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c18fe94.chunk.js","sourcesContent":["import axios from \"axios\"\nrequire(\"dotenv\").config();\nconst API_KEY = process.env.REACT_APP_NATIONAL_PARK_API_KEY\n\nexport default {\n    AllForState: function (){\n        return axios.get(\"https://developer.nps.gov/api/v1/parks?stateCode=CA&api_key=\" + API_KEY)\n    },\n    SearchByName: function(name) {\n        return axios.get(\"https://developer.nps.gov/api/v1/parks?q=\" + name + \"&stateCode=CA&api_key=\" + API_KEY)\n    }\n}","import React, { Component } from \"react\"\nimport \"./style.css\"\n\nexport default class Marker extends Component {\n    state = {\n        info: {\n            description: this.props.data.description,\n            designation: this.props.data.designation,\n            \"directions Info\": this.props.data.directionsInfo,\n            \"directions Url\": this.props.data.directionsUrl,\n            fullName: this.props.data.fullName,\n            states: this.props.data.states,\n            url: this.props.data.url,\n            \"weather Info\":this.props.data.weatherInfo\n        }\n    }\n\n    \n\n    render() {\n        return (\n            \n            <div className=\"icon\" onClick={()=>{this.props.onClick(this.state.info)}} data-toggle=\"modal\" data-target=\"#parkInfo\"><i className=\"fas fa-thumbtack fa-lg\"></i></div>\n            \n        )\n    }\n}","import React, { Component } from \"react\"\n\nexport default class Modal extends Component {\n\n    render() {\n        return (\n            <div className=\"modal fade\" id=\"parkInfo\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"parkInfoLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog modal-lg\" role=\"document\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\" id=\"parkInfoLabel\">{this.props.parkTitle}</h5>\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div className=\"modal-body\">\n                            {this.props.children}\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}","import React, { Component } from \"react\"\nimport API from \"../utils/API\"\nimport \"./style.css\"\n\nexport default class SearchForm extends Component {\n    state = {\n        searchValue: \"\",\n        searchResult: null\n    }\n\n    handleInputChange = (event)=>{\n        event.preventDefault();\n        const value = event.target.value\n        this.setState(\n            {searchValue: value}\n        )\n    }\n\n    handleFormSubmit = (event) => {\n        event.preventDefault();\n        API.SearchByName(this.state.searchValue)\n        .then(res =>{\n            this.setState({\n                searchResult: res.data.data\n            })\n            this.props.helper(this.state.searchResult)\n        })\n    }\n\n    render() {\n        return(\n        <form\n        className=\"text-center\"\n        onSubmit={this.handleFormSubmit}\n        >\n            <div className=\"form-group searchForm mx-2\">\n                <input onChange={this.handleInputChange} value={this.state.searchValue} type=\"text\" className=\"form-control\" id=\"parkName\" placeholder=\"Which park are you looking for?\" />\n            </div>\n            <button type=\"submit\" class=\"btn search-button\">Search</button>\n        </form>\n        )\n    }\n}","import React, { Component } from \"react\"\nimport GoogleMapReact from 'google-map-react';\nimport API from \"../utils/API\"\nimport Marker from \"../marker\"\nimport Modal from \"../modal\"\nimport SearchForm from \"../form\"\nimport \"./style.css\"\nrequire(\"dotenv\").config();\nconst API_KEY = process.env.REACT_APP_GOOGLE_API_KEY\n    ;\n\nclass Map extends Component {\n    state = {\n        center: {\n            lat: 36.7783,\n            lng: -119.4179\n        },\n        zoom: 6,\n        data: [],\n        currentParkInfo: {}\n    }\n\n    componentDidMount() {\n        API.AllForState().then(res => {\n            console.log(res)\n            let data = []\n            res.data.data.forEach((item) => {\n                if (item.latLong) {\n                    data.push(item)\n                }\n            })\n            this.setState({\n                data: data\n            });\n        })\n    }\n\n    handlePinClick = (data) => {\n        this.setState({\n            currentParkInfo: data\n        });\n\n    }\n\n    handleFormSubmit = (data) => {\n        let newData = []\n        data.forEach((item) => {\n            if (item.latLong) {\n                newData.push(item)\n            }\n        })\n        this.setState({\n            data: newData\n        });\n    }\n\n\n    render() {\n        return (\n\n            <div className=\"map-wrapper rounded\">\n                \n                        <SearchForm\n                            helper={this.handleFormSubmit}\n                        />\n                    <div className=\" mx-auto\" style={{ height: '80vh', width: '80%' }}>\n                        <GoogleMapReact\n                            bootstrapURLKeys={{ key: API_KEY }}\n                            defaultCenter={this.state.center}\n                            defaultZoom={this.state.zoom}\n                        >\n                            {this.state.data.map((park, i) => {\n                                let latLong = park.latLong.split(\",\")\n\n                                let lat = latLong[0].substr(4, latLong[0].length)\n                                let long = latLong[1].substr(6, latLong[1].length)\n                                return (\n                                    <Marker\n                                        key={i}\n                                        uniqueId={i}\n                                        lat={lat}\n                                        lng={long}\n                                        data={park}\n                                        onClick={this.handlePinClick}\n                                    />\n                                )\n                            })}\n                        </GoogleMapReact>\n                        <Modal\n                            parkTitle={this.state.currentParkInfo.fullName}\n                        >\n\n                            {Object.keys(this.state.currentParkInfo).map((item, i) => {\n                                if (item !== \"fullName\")\n                                    return (\n                                        <div>\n                                            <b>{`${item.toUpperCase()}: `}</b><span>{`${this.state.currentParkInfo[item]}`}</span>\n                                        </div>\n                                    )\n                            })}\n\n                        </Modal>\n                    </div>\n                </div>\n        )\n    }\n}\n\nexport default Map;","import React from \"react\"\nimport \"./style.css\"\n\nexport default function Jumbotron() {\n    return (\n        <div className=\"my-3 text-center jumbo jumbotron rounded jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"jumbo-text display-4\">California State Park Finder</h1>\n                <p className=\"lead jumbo-subtext\">Click on the pin to look at the park information or search for specific park using the search form</p>\n            </div>\n        </div>\n    )\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Map from \"./map\"\nimport Jumbotron from \"./jumbotron\"\n\nclass App extends Component {\n  state = {\n    currentParkInfo: {}\n  }\n\n  // handlePinClick = (event) => {\n  //   event.preventDefault()\n  //   let parkCode = event.target.getAttribute(\"data-parkcode\")\n  //   API.GetOnePark(parkCode)\n  //     .then(res => {\n  //       this.setState({\n  //         currentParkInfo: res.data.data\n  //       })\n  //     })\n\n  // }\n\n  render() {\n    return (\n      <div>\n      <div className=\"container\">\n      <Jumbotron/>\n        <Map></Map>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}